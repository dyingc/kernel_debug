Flags
------------

# tracer: nop
#
# entries-in-buffer/entries-written: 79/79   #P:6
#
#                              _-----=> irqs-off
#                             / _----=> need-resched
#                            | / _---=> hardirq/softirq
#                            || / _--=> preempt-depth
#                            ||| /     delay


preempt-depth:
--------------
	The level of preempt_disabled

Any time kernel code holds a spinlock, preemption is disabled on the relevant processor

Disabling preemtion is done by just incrementing the preempt_count for that process

If the process's preempt_count is nonzero, then the process can not be preempted and this check is done
while returning from system call and interrupt context

Kernel preemption is disabled via preempt_disable() and enabled via preempt_enable().

The call is nestable; you may call it any number of times. For each call, a corresponding call to preempt_enable() is required. The final corresponding call to preempt_enable()re-enables preemption.


CONFIG_PREEMPT should bes set for this to work

CONFIG_PREEMPT_VOLUNTARY
-----------------------

Originally there were only two preemption options for the kernel: running with preemption on or off

That setting was controlled by the kernel config option, CONFIG_PREEMPT

In 2005,  a third option named CONFIG_PREEMPT_VOLUNTARY that was designed

Nowadays, CONFIG_PREEMPT_VOLUNTARY is the default setting for pretty much all Linux distributions

https://www.codeblueprint.co.uk/2019/12/23/linux-preemption-latency-throughput.html


























