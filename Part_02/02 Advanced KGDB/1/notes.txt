Debugging Kernel Modules
------------------------

Kernel Modules are separate object files that can be loaded into the kernel's address space at runtime.

Each kernel module contains its own symbols that are separate from the kernel's symbols. 

Loadable kernel module is divided up into several sections.

	.text contains the module code
	.data and .bss contain most of the variables

Kgdb needs to be informed about this symbols using add-symbol-file command.

This command requires the relocated addresses of each section as command arguments.

(gdb) add-symbol-file /path/to/module <addr> \ #.text
	-s .data <addr> \
	-s .bss <addr>

Demo: Debugging e1000 module
-------------------------------

On the target:

gdb client needs to know the load address of the kernel module
$ cat /sys/module/e1000/sections/.text

Switch to KGDB Debugger mode by activating magic sysrq
$ echo 'ttyS0,115200' > /sys/module/kgdboc/parameters/kgdboc
$ echo g > /proc/sysrq-trigger

On the Development Machine:
Run the following commands:
$ gdb ./vmlinux
$ target remote /dev/ttyS1
$ add-symbol-file drivers/net/ethernet/intel/e1000/e1000.ko  <address>

Let's put breakpoint at e1000_xmit_frame which is called while transmitting a frame.

(gdb) break e1000_xmit_frame
Breakpoint 1 at 0xffffffffc0092f90: file drivers/net/ethernet/intel/e1000/e1000_main.c, line 3102.
(gdb) c

Now see as soon as it transmits a packet, system will stop and enter into kgdb session
