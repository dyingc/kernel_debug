Tracing Events
------------------

Function tracing is great but
        it doesn't show much data besides the functions being called
        no parameters or variables can be seen


Install kernel headers and sources
------------------------------------

root@ubuntu19:/usr/src# diff -b /etc/apt/sources.list /etc/apt/sources.list.old 
6c6
< deb-src http://old-releases.ubuntu.com/ubuntu/ disco main restricted
---
> # deb-src http://old-releases.ubuntu.com/ubuntu/ disco main restricted

sudo apt-get install linux-headers-$(uname -r)
sudo apt-get update ; sudo apt-get source linux


Use `cscope`
--------------

udo rm -rf /tmp/kernel-project ; mkdir -p /tmp/kernel-project ; cd /tmp/kernel-project # For kernel space
version=$(uname -r)
find /usr/src/linux-${version%%-*} -type f \( -name '*.h' -o -name '*.c' \) | sort -u > cscope.files
cscope -q -R -b -i cscope.files
cscope -d


Trace events
--------------

Trace events are built on top of something called tracepoints


What are tracepoints
---------------------

Tracepoints are hooks that are inserted into points of code of interest and call a certain function of your choice (also known as function probe)

A tracepoint can be "on" or "off"

When tracepoint is off
	it has no effect, except for adding a tiny time penalty and space penalty

When tracepoint is on
	 the function you provide is called each time the tracepoint is executed
	 When the function provided ends its execution, it returns to the caller

Unlike ftracer, trace point can record local variables of the function

Kernel uses TRACE_EVENT macro for adding tracepoints and trace_* (trace_sched_switch)

Note, you can search "trace_sched_switch" 


TRACE_EVENT macro
-------------------

Creates a tracepoint that can be placed in the kernel code.

Creates a callback function that can be hooked to this tracepoint.

Callback function records the data passed to it into the tracer ring buffer

Create a function that parses the data recorded to the ring buffer and translate it to a human readable format that the tracer can display to a user.

(Note: the `syscall` related tracepoints, eg: /sys/kernel/tracing/events/syscalls/sys_enter_bind, are not generated using this TRACE_EVENT macro. Instead, they are often generated automatically based on the system calls to avoid manually writing tracepoints for each syscall, given the large number of system calls.)


Delve into the details
------------------------

the magic is at: $KERNEL_SOURCE/include/linux/tracepoint.h:


```
#define TRACE_EVENT(name, proto, args, struct, assign, print)   \
        DECLARE_TRACE(name, PARAMS(proto), PARAMS(args))


#define DECLARE_TRACE(name, proto, args)                                \
        __DECLARE_TRACE(name, PARAMS(proto), PARAMS(args),              \
                        cpu_online(raw_smp_processor_id()),             \
                        PARAMS(void *__data, proto),                    \
                        PARAMS(__data, args))



#define __DECLARE_TRACE(name, proto, args, cond, data_proto, data_args) \
        extern struct tracepoint __tracepoint_##name;                   \
        static inline void trace_##name(proto)                          \
        {                                                               \
                if (static_key_false(&__tracepoint_##name.key))         \
                        __DO_TRACE(&__tracepoint_##name,                \
                                TP_PROTO(data_proto),                   \
                                TP_ARGS(data_args),                     \
                                TP_CONDITION(cond), 0);                 \
                if (IS_ENABLED(CONFIG_LOCKDEP) && (cond)) {             \
                        rcu_read_lock_sched_notrace();                  \
                        rcu_dereference_sched(__tracepoint_##name.funcs);\
                        rcu_read_unlock_sched_notrace();                \
                }                                                       \
        }                                                               \
```

So, for the TRACE_EVENT macro (defined in $KERNEL_SOURCE/include/trace/events/sched.h):

```
TRACE_EVENT(sched_switch,

        TP_PROTO(bool preempt,
                 struct task_struct *prev,
                 struct task_struct *next),

        TP_ARGS(preempt, prev, next),

        TP_STRUCT__entry(
                __array(        char,   prev_comm,      TASK_COMM_LEN   )
                __field(        pid_t,  prev_pid                        )
                __field(        int,    prev_prio                       )
                __field(        long,   prev_state                      )
                __array(        char,   next_comm,      TASK_COMM_LEN   )
                __field(        pid_t,  next_pid                        )
                __field(        int,    next_prio                       )
        ),

        TP_fast_assign(
                memcpy(__entry->next_comm, next->comm, TASK_COMM_LEN);
                __entry->prev_pid       = prev->pid;
                __entry->prev_prio      = prev->prio;
                __entry->prev_state     = __trace_sched_switch_state(preempt, prev);
                memcpy(__entry->prev_comm, prev->comm, TASK_COMM_LEN);
                __entry->next_pid       = next->pid;
                __entry->next_prio      = next->prio;
                /* XXX SCHED_DEADLINE */
        ),

        TP_printk("prev_comm=%s prev_pid=%d prev_prio=%d prev_state=%s%s ==> next_comm=%s next_pid=%d next_prio=%d",
                __entry->prev_comm, __entry->prev_pid, __entry->prev_prio,

                (__entry->prev_state & (TASK_REPORT_MAX - 1)) ?
                  __print_flags(__entry->prev_state & (TASK_REPORT_MAX - 1), "|",
                                { TASK_INTERRUPTIBLE, "S" },
                                { TASK_UNINTERRUPTIBLE, "D" },
                                { __TASK_STOPPED, "T" },
                                { __TASK_TRACED, "t" },
                                { EXIT_DEAD, "X" },
                                { EXIT_ZOMBIE, "Z" },
                                { TASK_PARKED, "P" },
                                { TASK_DEAD, "I" }) :
                  "R",

                __entry->prev_state & TASK_REPORT_MAX ? "+" : "",
                __entry->next_comm, __entry->next_pid, __entry->next_prio)
);
```

It will DYNAMICALLY generate (expand to) a function (pay attention to the function name: `trace_{name}` which is defined in the `__DECLARE_TRACE` macro):

```
static inline void trace_sched_switch(proto)
	... ... ... ...
```


Conclusion
------------
Events are tracepoints added by developers to monitor kernel subsystems like the scheduler, power management, interrupts, networking, gpio etc


