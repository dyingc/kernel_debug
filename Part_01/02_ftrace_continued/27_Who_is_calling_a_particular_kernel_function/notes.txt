Who calls this kernel function
----------------------------------

With ftrace, you can find out who is calling a particular kernel function

"function" tracer contains an option which creates backtrace for each function called by tracer: func_stack_trace

At this function, give me stack dump. Opposite of call graph

        Warning: Can cause live lock if all functions are traced !!
                 Must use set_ftrace_filter Before enabling

Note: You can use this feature only when the tracer is "function".

Example1:
------------
```
cd /sys/kernel/tracing
echo 0 > tracing_on
echo function > current_tracer
echo 1 > options/func_stack_trace
echo __x64_sys_read > set_ftrace_filter
echo > trace
echo 1 > tracing_on
sleep 5
echo 0 > tracing_on
echo '!__x64_sys_read' > set_ftrace_filter
echo 0 > options/func_stack_trace
```

In the trace file, we'll have something like:
```
 => __x64_sys_read
 => do_syscall_64
 => entry_SYSCALL_64_after_hwframe
            sshd-3322  [000] .... 11045.665880: __x64_sys_read <-do_syscall_64
            sshd-3322  [000] .... 11045.665881: <stack trace>
```
It means: The sshd (PID: 3322, at CPU 0) initiated the call stack: entry_SYSCALL_64_after_hwframe --> do_syscall_64 --> __x64_sys_read


Example2:
------------
# echo vfs_read > set_ftrace_filter

# echo function > current_tracer

# echo 1 > options/func_stack_trace

Example3:
------------
echo nop > current_tracer

echo schedule > set_ftrace_filter

cat set_ftrace_filter # double check

echo 1 > options/func_stack_trace

echo function > current_tracer

sleep 1

echo 0 > tracing_on

echo '!schedule' > set_ftrace_filter

echo 0 > options/func_stack_trace

cat trace

